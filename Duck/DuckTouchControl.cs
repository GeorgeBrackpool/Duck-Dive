//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Duck/DuckTouchControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DuckTouchControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DuckTouchControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DuckTouchControl"",
    ""maps"": [
        {
            ""name"": ""TouchControls"",
            ""id"": ""89cfe50d-55df-4839-9f3a-dba4df29b6dd"",
            ""actions"": [
                {
                    ""name"": ""TouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""861cf2c8-a098-47bd-92c7-e680507d2218"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""e06d05eb-97f3-49a8-9cf4-4a9e384e97ab"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aac0fc7b-97a1-40eb-b921-f64972a5743a"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0016d08-c5c1-458e-b898-e53acf9a4d59"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PcControls"",
            ""id"": ""894077e3-7719-40ce-82b2-b1e71d6ff091"",
            ""actions"": [
                {
                    ""name"": ""Fly"",
                    ""type"": ""Button"",
                    ""id"": ""86360b07-25a1-4a8a-80a5-77003eda0d26"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dive"",
                    ""type"": ""Button"",
                    ""id"": ""2784da00-2815-47ef-9096-bac8eb6da052"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a7fc552b-c38e-48ea-a9a0-d116c59208d6"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fly"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be81acc1-8800-43b4-98b6-9c95e2618153"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dive"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TouchControls
        m_TouchControls = asset.FindActionMap("TouchControls", throwIfNotFound: true);
        m_TouchControls_TouchPress = m_TouchControls.FindAction("TouchPress", throwIfNotFound: true);
        m_TouchControls_TouchPosition = m_TouchControls.FindAction("TouchPosition", throwIfNotFound: true);
        // PcControls
        m_PcControls = asset.FindActionMap("PcControls", throwIfNotFound: true);
        m_PcControls_Fly = m_PcControls.FindAction("Fly", throwIfNotFound: true);
        m_PcControls_Dive = m_PcControls.FindAction("Dive", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TouchControls
    private readonly InputActionMap m_TouchControls;
    private List<ITouchControlsActions> m_TouchControlsActionsCallbackInterfaces = new List<ITouchControlsActions>();
    private readonly InputAction m_TouchControls_TouchPress;
    private readonly InputAction m_TouchControls_TouchPosition;
    public struct TouchControlsActions
    {
        private @DuckTouchControl m_Wrapper;
        public TouchControlsActions(@DuckTouchControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @TouchPress => m_Wrapper.m_TouchControls_TouchPress;
        public InputAction @TouchPosition => m_Wrapper.m_TouchControls_TouchPosition;
        public InputActionMap Get() { return m_Wrapper.m_TouchControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchControlsActions set) { return set.Get(); }
        public void AddCallbacks(ITouchControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchControlsActionsCallbackInterfaces.Add(instance);
            @TouchPress.started += instance.OnTouchPress;
            @TouchPress.performed += instance.OnTouchPress;
            @TouchPress.canceled += instance.OnTouchPress;
            @TouchPosition.started += instance.OnTouchPosition;
            @TouchPosition.performed += instance.OnTouchPosition;
            @TouchPosition.canceled += instance.OnTouchPosition;
        }

        private void UnregisterCallbacks(ITouchControlsActions instance)
        {
            @TouchPress.started -= instance.OnTouchPress;
            @TouchPress.performed -= instance.OnTouchPress;
            @TouchPress.canceled -= instance.OnTouchPress;
            @TouchPosition.started -= instance.OnTouchPosition;
            @TouchPosition.performed -= instance.OnTouchPosition;
            @TouchPosition.canceled -= instance.OnTouchPosition;
        }

        public void RemoveCallbacks(ITouchControlsActions instance)
        {
            if (m_Wrapper.m_TouchControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchControlsActions @TouchControls => new TouchControlsActions(this);

    // PcControls
    private readonly InputActionMap m_PcControls;
    private List<IPcControlsActions> m_PcControlsActionsCallbackInterfaces = new List<IPcControlsActions>();
    private readonly InputAction m_PcControls_Fly;
    private readonly InputAction m_PcControls_Dive;
    public struct PcControlsActions
    {
        private @DuckTouchControl m_Wrapper;
        public PcControlsActions(@DuckTouchControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Fly => m_Wrapper.m_PcControls_Fly;
        public InputAction @Dive => m_Wrapper.m_PcControls_Dive;
        public InputActionMap Get() { return m_Wrapper.m_PcControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PcControlsActions set) { return set.Get(); }
        public void AddCallbacks(IPcControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_PcControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PcControlsActionsCallbackInterfaces.Add(instance);
            @Fly.started += instance.OnFly;
            @Fly.performed += instance.OnFly;
            @Fly.canceled += instance.OnFly;
            @Dive.started += instance.OnDive;
            @Dive.performed += instance.OnDive;
            @Dive.canceled += instance.OnDive;
        }

        private void UnregisterCallbacks(IPcControlsActions instance)
        {
            @Fly.started -= instance.OnFly;
            @Fly.performed -= instance.OnFly;
            @Fly.canceled -= instance.OnFly;
            @Dive.started -= instance.OnDive;
            @Dive.performed -= instance.OnDive;
            @Dive.canceled -= instance.OnDive;
        }

        public void RemoveCallbacks(IPcControlsActions instance)
        {
            if (m_Wrapper.m_PcControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPcControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_PcControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PcControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PcControlsActions @PcControls => new PcControlsActions(this);
    public interface ITouchControlsActions
    {
        void OnTouchPress(InputAction.CallbackContext context);
        void OnTouchPosition(InputAction.CallbackContext context);
    }
    public interface IPcControlsActions
    {
        void OnFly(InputAction.CallbackContext context);
        void OnDive(InputAction.CallbackContext context);
    }
}
